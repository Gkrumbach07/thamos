# coding: utf-8

"""
    Thoth User API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.6.0-dev
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class QebHwtThamosAdviseInput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'check_run_id': 'int',
        'repo_url': 'str',
        'commit_sha': 'str',
        'installation_id': 'int'
    }

    attribute_map = {
        'check_run_id': 'check_run_id',
        'repo_url': 'repo_url',
        'commit_sha': 'commit_sha',
        'installation_id': 'installation_id'
    }

    def __init__(self, check_run_id=None, repo_url=None, commit_sha=None, installation_id=None):  # noqa: E501
        """QebHwtThamosAdviseInput - a model defined in Swagger"""  # noqa: E501
        self._check_run_id = None
        self._repo_url = None
        self._commit_sha = None
        self._installation_id = None
        self.discriminator = None
        self.check_run_id = check_run_id
        self.repo_url = repo_url
        self.commit_sha = commit_sha
        self.installation_id = installation_id

    @property
    def check_run_id(self):
        """Gets the check_run_id of this QebHwtThamosAdviseInput.  # noqa: E501

        ID of the check-run that shall carry the thamos advise.  # noqa: E501

        :return: The check_run_id of this QebHwtThamosAdviseInput.  # noqa: E501
        :rtype: int
        """
        return self._check_run_id

    @check_run_id.setter
    def check_run_id(self, check_run_id):
        """Sets the check_run_id of this QebHwtThamosAdviseInput.

        ID of the check-run that shall carry the thamos advise.  # noqa: E501

        :param check_run_id: The check_run_id of this QebHwtThamosAdviseInput.  # noqa: E501
        :type: int
        """
        if check_run_id is None:
            raise ValueError("Invalid value for `check_run_id`, must not be `None`")  # noqa: E501

        self._check_run_id = check_run_id

    @property
    def repo_url(self):
        """Gets the repo_url of this QebHwtThamosAdviseInput.  # noqa: E501

        URL of the GitHub repository containing the Pull Request.  # noqa: E501

        :return: The repo_url of this QebHwtThamosAdviseInput.  # noqa: E501
        :rtype: str
        """
        return self._repo_url

    @repo_url.setter
    def repo_url(self, repo_url):
        """Sets the repo_url of this QebHwtThamosAdviseInput.

        URL of the GitHub repository containing the Pull Request.  # noqa: E501

        :param repo_url: The repo_url of this QebHwtThamosAdviseInput.  # noqa: E501
        :type: str
        """
        if repo_url is None:
            raise ValueError("Invalid value for `repo_url`, must not be `None`")  # noqa: E501

        self._repo_url = repo_url

    @property
    def commit_sha(self):
        """Gets the commit_sha of this QebHwtThamosAdviseInput.  # noqa: E501

        sha of the Pull Request's head commit.  # noqa: E501

        :return: The commit_sha of this QebHwtThamosAdviseInput.  # noqa: E501
        :rtype: str
        """
        return self._commit_sha

    @commit_sha.setter
    def commit_sha(self, commit_sha):
        """Sets the commit_sha of this QebHwtThamosAdviseInput.

        sha of the Pull Request's head commit.  # noqa: E501

        :param commit_sha: The commit_sha of this QebHwtThamosAdviseInput.  # noqa: E501
        :type: str
        """
        if commit_sha is None:
            raise ValueError("Invalid value for `commit_sha`, must not be `None`")  # noqa: E501

        self._commit_sha = commit_sha

    @property
    def installation_id(self):
        """Gets the installation_id of this QebHwtThamosAdviseInput.  # noqa: E501

        GitHub App Installation ID.  # noqa: E501

        :return: The installation_id of this QebHwtThamosAdviseInput.  # noqa: E501
        :rtype: int
        """
        return self._installation_id

    @installation_id.setter
    def installation_id(self, installation_id):
        """Sets the installation_id of this QebHwtThamosAdviseInput.

        GitHub App Installation ID.  # noqa: E501

        :param installation_id: The installation_id of this QebHwtThamosAdviseInput.  # noqa: E501
        :type: int
        """
        if installation_id is None:
            raise ValueError("Invalid value for `installation_id`, must not be `None`")  # noqa: E501

        self._installation_id = installation_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(QebHwtThamosAdviseInput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QebHwtThamosAdviseInput):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
